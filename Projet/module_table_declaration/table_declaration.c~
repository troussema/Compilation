/*-------------------------------------------------------------------------------
 *                                                                              *
 * Module contenant les fonctions pour gerer la table des declarations          *
 *                                                                              *
 * Auteur: SOLOFO RABONARIJAONA                                                 *
 *                                                                              *
 * Historique:                                                                  *
 *     - Creation le 03/10/17  par S.RABONARIJAONA                              *
 *                                                                              *
 *------------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "table_declaration.h"


int compteur_table_debordement = OFFSET_DEBORDEMENT;
declaration table_declaration[TAILLE_TABLE_DECLARATION];
int compteur_description_type_entete = 0;

/* =========== Insere une ligne dans la table ========== */

void inserer(char *lexeme, int nature, int region, int description, int execution)
{
  int i; 			/* courant sur table */
  int index = 1 /* = renvoyer_index(lexeme) */; /* recuperer l'indice du lexeme dans la table lexicographique */

  /* verifier si le lexeme existe deja dans la zone normale */
  if(table_declaration[index].index != -1)
  {  
    /* parcourir la zones debordement de la table pour verifier si le lexeme existe dejà */
    for(i = compteur_table_debordement - 1; i >= OFFSET_DEBORDEMENT; i--)
    {
      if (strcmp(table_declaration[i].lexeme, lexeme) == 0) /* si lexeme existe deja */
      {
	index = compteur_table_debordement++; /* insere dans zone de debordement */
	modifier_suivant(i, index);	  /* modifier suivant du lexeme qui existe deja */
      }
    }
  }

  memset(table_declaration[index].lexeme, '\0', strlen(lexeme)); /* allocation memoire pour colonne lexeme dans la table */
  
  if (table_declaration[index].lexeme == NULL)
  {
    fprintf(stderr, "Erreur allocation memoire !!");
    exit(-1);
  }
  
  strcpy(table_declaration[index].lexeme, lexeme); /* copie le lexème en parametre dans la colonne lexeme */
  table_declaration[index].nature = nature;
  table_declaration[index].region = region;
  table_declaration[index].description = description;
  table_declaration[index].execution = execution;
  table_declaration[index].index = index; /* insertion index et mise à jour compteur */
  
}



/* ============ modifier le champ suivant d'une declaration ============== */

void modifier_suivant(int index, int new_suivant)
{
  table_declaration[index].suivant = new_suivant;
}

/* =========== Initialise la table (insere les types simples) ======== */
void init_table()
{
  inserer("int", TYPE_SIMPLE, 0, 0, 1);
  inserer("float", TYPE_SIMPLE, 0, 1, 1);
  inserer("bool", TYPE_SIMPLE, 0, 2, 1);
  inserer("char", TYPE_SIMPLE, 0, 3, 1);
  inserer("string", TYPE_SIMPLE, 0, 4, 1);
}


/* ============= affiche la table à la sortie standard =============== */
void afficher_table()
{
  int i;
  fprintf(stdout, "TABLE DES DECLARATIONS - ZONE NORMALE\n");
  fprintf(stdout, "--------------------------------------\n");
  fprintf(stdout, "\n| Index | Nature | Suivant | Region | Description | Execution |\n");
  fprintf(stdout, "\n|-------------------------------------------------------------|\n");
  for (i = 0; i < TAILLE_TABLE_DECLARATION; i++)
  {
    fprintf(stdout, "| %d    | %d      | %d      | %d     | %d          | %d       |\n", table_declaration[i].index, table_declaration[i].nature, table_declaration[i].suivant, table_declaration[i].region, table_declaration[i].description, table_declaration[i].execution);
    fprintf(stdout, "---------------------------------------------------------------\n");
  }
}
